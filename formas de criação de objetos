// formas de criação de objetos

//1. usando a notação literal "{}" (não é JSON)
const obj1 = {}
console.log(obj1)

//2. Objeto em JS (função construtora)
console.log(typeof Object, typeof new Object)
const obj2 = new Object 
console.log(obj2)

//3. função construtora
function Produto (nome, preco, desc) {
    this.nome = nome //o this vai deixar ele publico
    this.getPrecoComDesconto = () => { //o this vai deixar essa função pu blica fora da função produto
        return preco * (1-desc)
    }
}

const p1 = new Produto('Caneta', 7.99, 0.15)
const p2 = new Produto('Notebook', 2.999, 0.25)
console.log(p1.getPrecoComDesconto(), p2.getPrecoComDesconto())


//4. função factory (pode usar notação literal ou função construtora)
function criarFuncionario(nome, salarioBase, faltas) {
    return { //abrindo objeto literal
        nome,
        salarioBase,
        faltas,
        getSalario() {
            return (salarioBase / 30) * (30 - faltas)
        }
    }
}
const f1 = criarFuncionario('vitor', 1256, 2)
const f2 = criarFuncionario('gi', 1200, 4)
console.log(f1.getSalario(), f2.getSalario())
 
//5. Object.create
const filha = Object.create(null)
filha.nome = 'ariella'
console.log(filha)

//6. uma funçao famosa que retorna objeto...
const fromJSON = JSON.parse('{"info": "Sou um JSON"}')
console.log(fromJSON.info)
