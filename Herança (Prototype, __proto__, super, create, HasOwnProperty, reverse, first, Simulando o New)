// Herança

const ferrari = {
    modelo: 'f40',
    velocidadeMax: 324
}

const volvo = {
    modelo: 'v40',
    velocidadeMax: 200
}

console.log(ferrari.__proto__) //__proto__ eu consigo acessa o objeto principal(objeto pai)
console.log(ferrari.__proto__ == Object.prototype)
console.log(volvo.__proto__)
console.log(volvo.__proto__ == Object.prototype)
console.log(Object.prototype.__proto__ === null)

function meuObjeto() {}
console.log(typeof Object, typeof meuObjeto)
console.log(Object.prototype, meuObjeto.prototype)


// "prototype" esta presente dentro de funções apenas
// "__proto__" ja esta presente dentro do objeto



//parte 2
//cadeia de protótipos (prototype chain)
const avo = { attr1: 'A'} //o principal aponta sempre para Object.prototype
const pai = { __proto__: avo, attr2: 'B'}
const filho = { __proto__: pai, attr3: 'C'}
console.log(filho.attr1, filho.attr2)



//outra maneira de fazer sem o __proto__ usando o setPrototypeOf(ES6) (as duas formas são oficiais da linguagem)
const carro = {
    velAtual: 0,
    velMax: 250,
    acelerarMais(delta){
        if(this.velAtual + delta <= this.velMax){
            this.velAtual += delta
        } else {
            this.velAtual = this.velMax
        }
    },
    status() {
        return `${this.velAtual}Km/h de ${this.velMax}Km/h`
    }
}

const ferrari1 = {
    modelo: 'Enzo',
    velMax: 324 //como eu defino o const ferrari com propriedade carro, essa velMax 324 vai ficar por cima da velMax 250, ou seja vai aparecer só a 324 

}

const volvo2 = {
    modelo: 'v30',
    status() {
        return `${this.modelo}: ${super.status()}`
    }
}

//super funciona como o this, porém o this é para referencia o objeto atual,
// ja o super é para referencia o metodo do prototipo (que aqui esta como carro)


//setPrototypeOf = estabelece uma relação entre dois objetos ou seja (ferrari (objeto), carro pai(prototype))
Object.setPrototypeOf(ferrari1, carro)
Object.setPrototypeOf(volvo2, carro)

console.log(ferrari1)
console.log(volvo2) //repare como defini no volvo2 o status() do carro que tem no carro (vai apresentar a função tambem)

volvo2.acelerarMais(100)
console.log(volvo2.status())

ferrari1.acelerarMais(300)
console.log(ferrari1.status())


// Parte 3 (outra forma de fazer a herança sem usar o __proto__ e o setPrototypeOf)
//Object.create

const papai = {nome: 'Vitor', corCabelo: 'Castanho'}
const filha1 = Object.create(papai)
filha1.nome = 'Ariella'
console.log(filha1.nome, filha1.corCabelo)

const filha2 = Object.create(papai, {
    nome: {value: 'Bia', writable: false, enumerable: true}
})

console.log(filha2.nome)
filha2.nome = 'gi' //repare que como eu defini como uma const ele nao vai ser alterado para gi
console.log(`${filha2.nome} tem cabelo ${filha2.corCabelo}`)


//repare que as duas filha tem ['nome'], se eu passo o enumerable para falso ela não teriam mais a chave nome
console.log(Object.keys(filha1))
console.log(Object.keys(filha2))

for(let key in filha2) {
    console.log(key)
}

//hasOwnProperty = ou seja, ela tem aquela propriedade(pertence a ela, ou é de herança ?)
for(let key in filha2) {
    filha2.hasOwnProperty(key) ?
    console.log(key) : console.log(`Por herança: ${key}`)
}


// Parte 4 (entendendo mais sobre a função e o atributo prototype)
function meuObjeto() {}
console.log(meuObjeto.prototype)

const obj1 = new meuObjeto
const obj2 = new meuObjeto
console.log(obj1.__proto__ === obj2.__proto__)
console.log(meuObjeto.prototype === obj1.__proto__)
// resumindo quando cria um objeto o __proto__ aponta para a FUNÇÂO meuObjeto.prototype e não Object.prototype (isso na função construtora)

meuObjeto.prototype.nome = 'Anonimo' 
meuObjeto.prototype.falar = function () {
    console.log(`Bom dia, meu nome é ${this.nome}!`)
}
//lembrando toda função tem o atributo prototype
// todo objeto tem o atributo __proto__
obj1.falar()

obj2.nome = 'Anonymous'
obj2.falar()


const obj3 = {}
obj3.__proto__ = meuObjeto.prototype
obj3.nome = 'Obj3'
obj3.falar()

// resumindo a loucura kk...
console.log((new meuObjeto).__proto__ === meuObjeto.prototype)
console.log(meuObjeto.__proto__ === Function.prototype)
console.log(Function.prototype.__proto__ === Object.prototype)
console.log(Object.prototype.__proto___ === null)



// Parte 5 (funcionalidades importantes)

//os 3 possui o .prototype
console.log(typeof String)
console.log(typeof Array)
console.log(typeof Object)


//adicionar novas funções ou atributos dentro de um determinado prototipo por exemplo na string
String.prototype.reverse = function () { //o this acessa a string
    return this.split('').reverse().join('')
}
console.log('Escola Cod3r'.reverse()) // = reverse vai colocar o texto de traz para frente 

Array.prototype.first = function () { //o this acessa o array
    return this[0]
}
console.log([1, 2, 3, 4, 5].first())
console.log(['a', 'b', 'c'].first())


// Parte 6

function Aula (nome, video) {
    this.nome = nome
    this.video = video
}
//instanciando objetos a partir da função aula
const aula1 = new Aula('Bem vindo', 123)
const aula2 = new Aula('até breve', 1)
console.log(aula1, aula2)

//quando usamos o new na função construtora, nós criamos um novo objeto e o prototipo aponta para a função aula


//Simulando o operador "new"
//o f = é a função Aula
function novo(f, ...parametros) { //... = operador spered para concatenar tudo em um array
    const objetu = {} //objeto vazio (como nao vou usar o new uso esse objeto vazio)
    objetu.__proto__ = f.prototype //O prototipo desse objeto vazio que criei vai apontar para a função aula função.prototype
    f.apply(objetu, parametros) //parametros sera um array lembre-se que eu coloquei ...parametros (para concatenar tudo dentro de um array)
    return objetu  
}

const aula3 = novo(Aula, 'Welcome', 456)
const aula4 = novo(Aula, 'Good bye', 978)
console.log(aula3, aula4)
